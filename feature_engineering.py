# -*- coding: utf-8 -*-
"""feature_engineering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oP0fFHg5kHuFFALHH5ojjXuwNhCagvlC
"""

import pandas as pd
from typing import Tuple, List, Dict
def compute_rsi(series: pd.Series, period: int = 14) -> pd.Series:
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / (avg_loss + 1e-10)
    rsi = 100 - (100 / (1 + rs))
    return rsi
def compute_bollinger_bands(series: pd.Series, window: int = 20, num_std: int = 2) -> Tuple[pd.Series, pd.Series]:
    rolling_mean = series.rolling(window=window).mean()
    rolling_std = series.rolling(window=window).std()
    upper_band = rolling_mean + (rolling_std * num_std)
    lower_band = rolling_mean - (rolling_std * num_std)
    return upper_band, lower_band
def compute_macd(series: pd.Series, fast: int = 12, slow: int = 26, signal: int = 9) -> Tuple[pd.Series, pd.Series]:
    ema_fast = series.ewm(span=fast, adjust=False).mean()
    ema_slow = series.ewm(span=slow, adjust=False).mean()
    macd = ema_fast - ema_slow
    macd_signal = macd.ewm(span=signal, adjust=False).mean()
    return macd, macd_signal
def compute_adx(df: pd.DataFrame, period: int = 14) -> pd.Series:
    high = df['high']
    low = df['low']
    close = df['close']

    plus_dm = high.diff()
    minus_dm = low.diff()

    plus_dm[plus_dm < 0] = 0
    minus_dm[minus_dm > 0] = 0

    tr1 = high - low
    tr2 = abs(high - close.shift())
    tr3 = abs(low - close.shift())
    tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)

    atr = tr.rolling(window=period).mean()

    plus_di = 100 * (plus_dm.rolling(window=period).mean() / atr)
    minus_di = abs(100 * (minus_dm.rolling(window=period).mean() / atr))
    dx = (abs(plus_di - minus_di) / (plus_di + minus_di)) * 100
    adx = dx.rolling(window=period).mean()
    return adx


def add_technical_indicators(df: pd.DataFrame) -> pd.DataFrame:
    """
    Thêm các chỉ báo kỹ thuật gồm:
    RSI, SMA, EMA, Bollinger Bands, MACD, ADX, Momentum, Lagged Returns, Volume Features, Volatility.
    """
    df = df.copy()

    # Chỉ báo cơ bản
    df['sma_5'] = df['close'].rolling(window=5).mean()
    df['sma_20'] = df['close'].rolling(window=20).mean()
    df['ema_10'] = df['close'].ewm(span=10, adjust=False).mean()
    df['rsi_14'] = compute_rsi(df['close'], period=14)
    df['bb_upper'], df['bb_lower'] = compute_bollinger_bands(df['close'])
    df['momentum'] = df['close'] - df['close'].shift(5)

    # Chỉ báo nâng cao
    df['macd'], df['macd_signal'] = compute_macd(df['close'])
    df['adx'] = compute_adx(df)

    # Tính toán thêm
    df['lag_return_1'] = df['close'].pct_change(1)
    df['lag_return_5'] = df['close'].pct_change(5)
    df['volatility_10'] = df['close'].rolling(window=10).std()
    df['volume_change'] = df['volume'].pct_change()

    df.dropna(inplace=True)
    df.reset_index(drop=True, inplace=True)

    return df