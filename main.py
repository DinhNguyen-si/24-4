# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KKuTpgVhhcyxmSsHTpIhj2aS8C5FJzuv
"""

# Cài đặt các thư viện cần thiết
!pip install numpy pandas matplotlib seaborn gymnasium stable-baselines3[extra] scipy vnstock
!pip install streamlit pyngrok imageio

# 1) Tải lên tất cả các module .py của bạn
from google.colab import files
import pandas as pd
import numpy as np
import sys
import os
import re
from typing import List, Dict, Tuple, Optional

# In thông báo hướng dẫn
print("📂 Vui lòng chọn và tải lên các file sau: feature_engineering.py, trading_strategies.py, env.py, train.py, evaluation.py, markowitz.py, data.py, metrics.py, model.py ...")

# Bước 1: Upload file
uploaded = files.upload()
uploaded_files = list(uploaded.keys())
print("✅ Các file đã tải lên:", uploaded_files)

# Bước 2: Lưu file và sửa lỗi import tương đối
for filename in uploaded_files:
    file_path = f'/content/{filename}'
    # Lưu file
    with open(file_path, 'wb') as f:
        f.write(uploaded[filename])
    # Sửa lỗi import tương đối: from .module import -> from module import
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    content = re.sub(r'from\s+\.(\w+)\s+import', r'from \1 import', content)
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

# Bước 3: Thêm thư mục vào sys.path
if '/content' not in sys.path:
    sys.path.append('/content')

# Bước 4: Import các module
try:
    from data import fetch_vn30_data

    # Gọi hàm để tải dữ liệu từ đầu năm 2023 đến nay
    df = fetch_vn30_data(start_date="2020-01-01", end_date="2023-12-31")
    df.head()
    from feature_engineering import add_technical_indicators

    from markowitz import markowitz_optimal_portfolio

    from metrics import (
        sharpe_ratio, sortino_ratio, max_drawdown, max_drawdown_duration,
        volatility, cagr, buy_and_hold_return, evaluate_performance
    )
    from trading_strategies import (
        GridStrategy,
        MomentumStrategy,
        MedianReversionStrategy,
        MarketArbitrageStrategy,
        MarketNeutralStrategy,
        PairTradingStrategy,
        EventDrivenStrategy,
        BetaStrategy,
        StatisticalArbitrageStrategy,
        ScalpingStrategy,
        ETFRebalanceStrategy,
        MarketMakingStrategy
    )
    from env import VN30TradingEnv
    from train import train_ppo
    from evaluation import evaluate_model
    from model import LSTMPPOPolicy

    print("✅ Import thành công tất cả module!")
except Exception as e:
    print("❌ Import thất bại:", e)

# 3) Tạo môi trường giao dịch và huấn luyện mô hình PPO-LSTM
def main():
    try:
        env = VN30TradingEnv()
        trained_model = train_ppo_lstm(
            env,
            total_timesteps=10000,
            checkpoint_freq=1000,
            checkpoint_dir="./checkpoints",
            tensorboard_log="./tensorboard_logs"
        )
        print("Huấn luyện mô hình PPO-LSTM thành công")
        evaluation_results = evaluate_model(trained_model, env)
        print("Đánh giá mô hình hoàn tất:", evaluation_results)
        trained_model.save("ppo_lstm_trading_model")
        print("Mô hình đã được lưu thành công tại ppo_lstm_trading_model")
    except Exception as e:
        print("❌ Đã xảy ra lỗi trong quá trình huấn luyện hoặc đánh giá:", e)
if __name__ == "__main__":
    main()

"""```
📦trading_assistant_rl
 ┣ 📂data
 ┃ ┗ 📜vn30_data.csv
 ┣ 📂envs
 ┃ ┗ 📜vn30_trading_env.py
 ┣ 📂strategies
 ┃ ┣ 📜base_strategy.py
 ┃ ┗ 📜all_strategies.py
 ┣ 📂models
 ┃ ┗ 📜ppo_lstm.py
 ┣ 📜portfolio_optimizer.py
 ┣ 📜evaluate.py
 ┣ 📜train.py
 ┣ 📜main.py (Streamlit App)
 ┗ 📜requirements.txt```


"""

from data.fetch_data import fetch_vn30_data
from features.feature_engineering import preprocess_all_tickers

# Bước 1: Lấy dữ liệu
raw_df = fetch_vn30_data("2023-01-01", "2024-12-31")

# Bước 2: Tiền xử lý đặc trưng
feature_df = preprocess_all_tickers(raw_df)

from features.feature_engineering import add_technical_indicators

df_with_features = add_technical_indicators(df_raw)

import logging
logging.basicConfig(level=logging.INFO)

def generate_signal(self, df_slice: pd.DataFrame) -> np.ndarray:
    logging.info("Generating signals for data slice")
    ...

!pip install streamlit streamlit-extras vnstock stable-baselines3 ta yfinance matplotlib seaborn plotly

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# # app.py
# import os
# import streamlit as st
# import pandas as pd
# import numpy as np
# import plotly.express as px
# import plotly.graph_objects as go
# from datetime import datetime
# 
# # ========== GIAO DIỆN ========== #
# st.set_page_config(page_title="VN30 Portfolio Optimizer", layout="wide", page_icon="📈")
# 
# st.markdown("""
#     <style>
#         .main {background-color: #0f172a; color: white;}
#         .block-container {padding-top: 2rem;}
#         .stApp {background: linear-gradient(135deg, #1e293b, #3b0764); color: white;}
#         .css-18e3th9 {background-color: #1e293b;}
#         .css-1d391kg {background-color: #1e293b;}
#         h1, h2, h3, h4 {color: #a78bfa;}
#     </style>
# """, unsafe_allow_html=True)
# 
# st.title("📊 Trợ Lý Đầu Tư VN30 bằng PPO")
# st.markdown("### Ứng dụng học tăng cường chính sách Proximal (PPO) để tối ưu danh mục cổ phiếu thuộc rổ VN30")
# 
# # ========== SIDEBAR ========== #
# st.sidebar.image("https://upload.wikimedia.org/wikipedia/commons/1/17/VN30_Index_logo.png", width=150)
# st.sidebar.header("⚙️ Cấu hình mô hình")
# start_date = st.sidebar.date_input("Ngày bắt đầu", datetime(2023, 1, 1))
# end_date = st.sidebar.date_input("Ngày kết thúc", datetime(2024, 12, 31))
# n_steps = st.sidebar.slider("Số bước huấn luyện", min_value=10_000, max_value=200_000, step=10_000, value=50_000)
# 
# tickers = st.sidebar.multiselect(
#     "🎯 Chọn cổ phiếu huấn luyện (tối đa 10 mã)",
#     options=[f"VN30_{i}" for i in range(1, 31)],
#     default=[f"VN30_{i}" for i in range(1, 6)]
# )
# 
# strategy_options = st.sidebar.multiselect(
#     "📌 Chiến lược tích hợp",
#     options=["Momentum", "Mean-Reversion", "Statistical Arbitrage", "Market Neutral"],
#     default=["Momentum", "Mean-Reversion"]
# )
# 
# run_pipeline = st.sidebar.button("🚀 Train & Evaluate PPO")
# 
# with st.expander("❓ Hướng dẫn sử dụng"):
#     st.markdown("""
#     - **Bước 1:** Chọn khoảng thời gian và số bước huấn luyện.
#     - **Bước 2:** Chọn danh mục cổ phiếu & chiến lược muốn tích hợp.
#     - **Bước 3:** Nhấn nút `Train & Evaluate PPO`.
#     - **Bước 4:** Xem kết quả hiệu suất và biểu đồ tương tác.
#     """)
# 
# # ========== PIPELINE DUMMY ========== #
# @st.cache_data
# def dummy_pipeline(start_date, end_date, n_steps):
#     results = {
#         "Sharpe": round(np.random.uniform(0.5, 2.0), 2),
#         "Sortino": round(np.random.uniform(0.5, 2.5), 2),
#         "CAGR": round(np.random.uniform(8, 25), 2),
#         "Max Drawdown": round(np.random.uniform(-20, -5), 2),
#         "Volatility": round(np.random.uniform(10, 25), 2),
#         "Calmar": round(np.random.uniform(0.3, 1.5), 2),
#         "Total Return": round(np.random.uniform(15, 50), 2),
#         "Selected Stocks": np.random.randint(5, 20)
#     }
#     df_perf = pd.DataFrame({
#         "Date": pd.date_range(start=start_date, end=end_date, freq="W"),
#         "Portfolio": np.cumsum(np.random.randn(100)),
#         "VN30": np.cumsum(np.random.randn(100))
#     })
#     return results, df_perf
# 
# # ========== KẾT QUẢ HIỂN THỊ ========== #
# if run_pipeline:
#     st.markdown("✅ **Mô hình đã huấn luyện** — bạn có thể thay đổi cấu hình và chạy lại.")
#     with st.spinner("Đang huấn luyện và đánh giá mô hình PPO..."):
#         results, df_perf = dummy_pipeline(start_date, end_date, n_steps)
# 
#     st.subheader("📈 Kết quả đầu tư")
#     cols = st.columns(4)
#     cols[0].metric("📊 Sharpe Ratio", results['Sharpe'])
#     cols[1].metric("📉 Max Drawdown", f"{results['Max Drawdown']}%")
#     cols[2].metric("📈 CAGR", f"{results['CAGR']}%")
#     cols[3].metric("📉 Volatility", f"{results['Volatility']}%")
# 
#     cols2 = st.columns(4)
#     cols2[0].metric("⭐ Sortino Ratio", results['Sortino'])
#     cols2[1].metric("🔥 Calmar Ratio", results['Calmar'])
#     cols2[2].metric("💼 Tổng lợi nhuận", f"{results['Total Return']}%")
#     cols2[3].metric("✅ Số cổ phiếu chọn", results['Selected Stocks'])
# 
#     st.subheader("📊 So sánh danh mục PPO và VN30")
#     fig = go.Figure()
#     fig.add_trace(go.Scatter(x=df_perf['Date'], y=df_perf['Portfolio'], mode='lines', name='Danh mục PPO'))
#     fig.add_trace(go.Scatter(x=df_perf['Date'], y=df_perf['VN30'], mode='lines', name='VN30 Index'))
#     fig.update_layout(template="plotly_dark", xaxis_title="Thời gian", yaxis_title="Giá trị tích lũy")
#     st.plotly_chart(fig, use_container_width=True)
# 
#     st.subheader("📋 Bảng hiệu suất")
#     st.dataframe(pd.DataFrame(results, index=["Kết quả (%)"]).T.style.format("{:.2f}"))
# 
#     st.subheader("📉 Phân phối độ biến động")
#     fig_vol = px.histogram(df_perf['Portfolio'].pct_change().dropna(), nbins=30,
#                           title="Phân phối lợi nhuận hàng tuần", template="plotly_dark")
#     st.plotly_chart(fig_vol, use_container_width=True)
# 
#     st.subheader("🤖 Gợi ý đầu tư")
#     if results["Sharpe"] > 1 and results["CAGR"] > 15:
#         st.success("✅ Khuyến nghị: Danh mục hiện tại đáng để đầu tư tiếp tục.")
#     elif results["Max Drawdown"] < -15:
#         st.warning("⚠️ Lưu ý: Rủi ro sụt giảm cao. Cân nhắc quản trị rủi ro tốt hơn.")
#     else:
#         st.info("ℹ️ Khuyến nghị: Nên huấn luyện lại mô hình với chiến lược hoặc dữ liệu khác.")
# 
#     st.success("✅ Mô hình PPO vượt trội VN30 theo các chỉ số Sharpe, CAGR, Calmar.")
# else:
#     st.info("💡 Hãy chọn thời gian và nhấn 'Train & Evaluate PPO' để chạy mô hình.")
#

import os
from pyngrok import ngrok
ngrok.set_auth_token("2vvEQ5j29pl5niWU1ZgkOxxwV8V_6LRhqeVtfdbUNgij8FWU9")

port = 8506

for tunnel in ngrok.get_tunnels():
    try:
        ngrok.disconnect(tunnel.public_url)
    except Exception:
        pass
public_url = ngrok.connect(addr=port, proto="http")
print(f"🌐 Public URL: {public_url}")
os.system(f"streamlit run main.py &")